{"version":3,"sources":["App.module.scss","images/base.jpg","images/ribbon.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","getImageObj","img","obj","globalThis","Image","src","App","useState","checked","setChecked","text","setText","Base","image","baseImg","x","y","width","height","Ribbon","ribbonImg","className","styles","container","stage","fontSize","align","wrap","lineHeight","verticalAlign","strokeWidth","stroke","lineJoin","fill","type","onChange","e","target","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,UAAY,uBAAuB,MAAQ,qB,+GCD9C,MAA0B,iCCA1B,MAA0B,mC,wBCMnCC,EAAc,SAACC,GACnB,IAAMC,EAAM,IAAIC,WAAWC,MAI3B,OAFAF,EAAIG,IAAMJ,EAEHC,GAsEMI,MAnEf,WAAgB,IAAD,EACiBC,oBAAS,GAD1B,mBACNC,EADM,KACGC,EADH,OAEWF,mBAAS,IAFpB,mBAENG,EAFM,KAEAC,EAFA,KAGPC,EAAO,kBAAM,cAAC,IAAD,CAAOC,MAAOb,EAAYc,GAAUC,EAAG,EAAGC,EAAG,EAAGC,MAAO,KAAMC,OAAQ,OAClFC,EAAS,WACb,OAAIX,EACK,cAAC,IAAD,CAAOK,MAAOb,EAAYoB,GAAYL,EAAG,GAAIC,EAAG,IAAKC,MAAO,OAAWC,OAAQ,UAGjF,8BAGT,OACE,sBAAKG,UAAWC,IAAOC,UAAvB,UACE,cAAC,IAAD,CAAON,MAAO,KAAMC,OAAQ,IAAKG,UAAWC,IAAOE,MAAnD,SACE,eAAC,IAAD,WACE,cAACZ,EAAD,IACA,cAACO,EAAD,IACA,cAAC,IAAD,CACET,KAAMA,EACNM,EAAG,IACHD,EAAG,GACHU,SAAU,GACVC,MAAM,SACNC,KAAK,OACLC,WAAY,IACZC,cAAc,SACdC,YAAa,GACbC,OAAO,OACPC,SAAS,QACTf,MAAO,KACPC,OAAQ,MAEV,cAAC,IAAD,CACER,KAAMA,EACNM,EAAG,IACHD,EAAG,GACHU,SAAU,GACVC,MAAM,SACNC,KAAK,OACLC,WAAY,IACZC,cAAc,SACdI,KAAK,OACLF,OAAO,OACPd,MAAO,KACPC,OAAQ,WAKd,4BACE,kCACE,uBAAOgB,KAAK,WAAWC,SAAU,kBAAM1B,GAAYD,IAAUA,QAASA,IADxE,oBAMF,4BACE,6DAEE,uBAAO2B,SAAU,SAACC,GAAD,OAAOzB,EAAQyB,EAAEC,OAAOC,QAAQA,MAAO5B,aC5DnD6B,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAgD,IAA9CC,EAA6C,EAA7CA,OAAQC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,QAC1DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCHdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.0da0fadc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__eSJ6i\",\"stage\":\"App_stage__1Bspp\"};","export default __webpack_public_path__ + \"static/media/base.224f4f02.jpg\";","export default __webpack_public_path__ + \"static/media/ribbon.8c34f0f7.png\";","import React, {useState} from 'react';\nimport {Layer, Text, Image, Stage} from 'react-konva';\nimport baseImg from './images/base.jpg';\nimport ribbonImg from './images/ribbon.png';\nimport styles from './App.module.scss';\n\nconst getImageObj = (img: string) => {\n  const obj = new globalThis.Image();\n\n  obj.src = img;\n\n  return obj;\n};\n\nfunction App() {\n  const [checked, setChecked] = useState(false);\n  const [text, setText] = useState('');\n  const Base = () => <Image image={getImageObj(baseImg)} x={0} y={0} width={1600} height={900} />;\n  const Ribbon = () => {\n    if (checked) {\n      return <Image image={getImageObj(ribbonImg)} x={44} y={100} width={892 / 3.2} height={542 / 3.2} />;\n    }\n\n    return <></>;\n  };\n\n  return (\n    <div className={styles.container}>\n      <Stage width={1600} height={900} className={styles.stage}>\n        <Layer>\n          <Base />\n          <Ribbon />\n          <Text\n            text={text}\n            y={130}\n            x={70}\n            fontSize={60}\n            align=\"center\"\n            wrap=\"word\"\n            lineHeight={1.5}\n            verticalAlign=\"bottom\"\n            strokeWidth={20}\n            stroke=\"#000\"\n            lineJoin=\"round\"\n            width={1100}\n            height={690}\n          />\n          <Text\n            text={text}\n            y={130}\n            x={70}\n            fontSize={60}\n            align=\"center\"\n            wrap=\"word\"\n            lineHeight={1.5}\n            verticalAlign=\"bottom\"\n            fill=\"#fff\"\n            stroke=\"#fff\"\n            width={1100}\n            height={690}\n          />\n        </Layer>\n      </Stage>\n\n      <p>\n        <label>\n          <input type=\"checkbox\" onChange={() => setChecked(!checked)} checked={checked} />\n          速報\n        </label>\n      </p>\n\n      <p>\n        <label>\n          テキスト\n          <input onChange={(e) => setText(e.target.value)} value={text} />\n        </label>\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","import {ReportHandler} from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './common.scss';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}